---
import MainLayout from "../layouts/MainLayout.astro";
import CardPost from "../components/CardPost.astro";
import MainPost from "../components/MainPost.astro";
import CarousselAutoplay from "../components/CarousselAutoplay.astro";
import CategoryCloud from "../components/CategoryCloud.astro";
import { formatBlogPosts } from "../js/utils";
const allPosts = await Astro.glob("./blog/*.mdx");
const formattedPosts = formatBlogPosts(allPosts, {
  filterOutDrafts: true,
  filterOutFuturePosts: true,
  sortByDate: true,
  limit: null,
});
const latestPost = formattedPosts[0];
---
<MainLayout title="npmBytes">
  <main>
    <section class="welcome-bytes flex margin-auto px-4 min-h-[30vh] w-full items-center lg:min-h-[50vh]">
      <div class="flex flex-col justify-center m-auto max-w-full text-xl text-[#d3c7ff] lg:text-3xl ">
        <div>
          Stay informed on the news of 
            <span class="magic-text">Technology </span>,
            <span class="magic-text">web development </span>,
            <span class="magic-text">animation </span>, ...
        </div>
        <div>Discover new articles every Monday, for free.</div>
        <!-- <div>Discover new articles and shows every Monday, for free.</div> -->
      </div>
    </section>

    <section class="margin-auto">
      
      <div>
          <MainPost post={latestPost} />
      </div>
      <!-- <CarousselAutoplay /> -->
      <div class="flex flex-col max-w-[90%] m-auto justify-center md:flex-col">
        <div class="flex flex-col justify-between md:justify-normal">
          
            {
              formattedPosts
                .slice(1,9)
                .map((post) => <CardPost key={post.url} post={post} />)
            }
          <!-- <div class="morepost">
            <a href="/"><div class="badge">More post</div></a>
          </div> -->
        </div>
        
      </div>
    </section>
    <aside class="flex justify-center">
      <div class="flex-col ">
        <h2 class="flex justify-center p-2">Blog Categories</h2>
        <CategoryCloud/>
      </div>
    </aside>
  </main>
</MainLayout>

<style>
  @keyframes background-pan {
    from {
      background-position: 0% center;
    }

    to {
      background-position: -200% center;
    }
    animation-iteration-count: infinite;
  }

  @keyframes scale {
    from,
    to {
      transform: scale(0);
    }

    50% {
      transform: scale(1);
    }
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(180deg);
    }
  }

  svg {
    animation: rotate 1000ms linear infinite;
    display: block;
    opacity: 0.7;
  }
  path {
    fill: violet;
  }

  .access {
    padding: 10px;
    margin-top: 5vh;
  }
  .page {
    display: flex;
    flex-direction: row;
    max-width: 90%;
    margin: 0 auto;
    justify-content: center;
  }
  .post-container {
    display: flex;
    flex-direction: column;
  }
  .posts{
    display: flex;
    flex-direction: row;
    max-width: 100rem;
    flex-wrap: wrap;
  }
  .morepost{
    padding:1rem;
    display: flex;
    justify-content: center;
  }
  .container-categories {
    margin-left: 5rem;
  }

  .welcome {
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin : 0 auto ; 
    max-width: 200rem;
    font-size: 32px;
    color: #d3c7ff;
  }
  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

</style>

<script>
  let index = 0,
    interval = 1000;

  const rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

  const animate = (star) => {
    star.style.setProperty("--star-left", `${rand(-10, 100)}%`);
    star.style.setProperty("--star-top", `${rand(-40, 80)}%`);

    star.style.animation = "none";
    star.offsetHeight;
    star.style.animation = "";
  };

  for (const star of document.getElementsByClassName("magic-star")) {
    setTimeout(() => {
      animate(star);

      setInterval(() => animate(star), 3000);
    }, index++ * (interval / 3));
  }
</script>
